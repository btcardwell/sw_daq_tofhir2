#!/usr/bin/env python
from __future__ import print_function
from petsys import daqd, config
from copy import deepcopy
from time import sleep
import argparse
import os
import pprint

def get_list(input_list):
        vals = []
        comma_list = input_list.split(',')
        for item in comma_list:
                hyphen_list = item.split('-')
                if len(hyphen_list) > 1:
                        for i in range(int(hyphen_list[0]), int(hyphen_list[1])+1):
                                vals.append(i)
                else:
                        vals.append(float(hyphen_list[0]))
        return vals

parser = argparse.ArgumentParser(description='Acquire SiPM data')
parser.add_argument("--config", type=str, required=True, help="Configuration file")
parser.add_argument("-o", type=str, dest="fileNamePrefix", required=False, help="Data filename (prefix)")
parser.add_argument("--time", type=float, required=True, help="Acquisition time (in seconds)")
parser.add_argument("--enable-hw-trigger", dest="hwTrigger", action="store_true", help="Enable the hardware coincidence filter")
parser.add_argument("--ith1", type=str, dest="ith1", required=True, help="comma separated values for ith1")
parser.add_argument("--ith2", type=str, dest="ith2", required=True, help="comma separated values for ith2")
parser.add_argument("--ithe", type=str, dest="ithe", required=True, help="comma separated values for ithe")
parser.add_argument("--ith2rel", dest="ith2rel", action="store_true", help="relative ith2 threshold")
parser.add_argument("--delayT", type=str, dest="delayT", required=False, help="delay for t branch [0..6]")
parser.add_argument("--delayE", type=str, dest="delayE", required=False, help="delay for e branch [0..6]")
parser.add_argument("--trimT", type=str, dest="trimT", required=False, help="trim for t branch [0..31]")
parser.add_argument("--trimE", type=str, dest="trimE", required=False, help="trim for e branch [0..31]")
parser.add_argument("--attGain", type=int, dest="attGain", required=False, help="attenuator gain [0..7]")
parser.add_argument("--ov", type=str, dest="ov", required=True, help="comma separated values for ov")
parser.add_argument("--ovDrop", type=float, dest="ovDrop", required=False, help="compensation for ov drop")
parser.add_argument("--aldo", dest="aldo", action="store_true", help="switch for ALDO usage")
parser.add_argument("--trigger", type=str, dest="trigger", required=False, help="trigger type (none, ext, int)")
parser.add_argument("--freq", type=float, dest="freq", required=False, help="internal trigger frequency (in kHz)")
parser.add_argument("--phase", type=float, dest="phase", required=False, help="trigger phase (in clk)")
parser.add_argument("--prescale", type=int, dest="prescale", required=False, help="external trigger prescale [0..63]")
parser.add_argument("--l1", dest="l1", action="store_true", help="Enable the L1 filtering")
parser.add_argument("--enable-channels", dest="enChannels", required=False, help="comma separated vector of enabled channels")
parser.add_argument("--fix-channels", dest="fixChannels", required=False, help="comma separated vector of channels for which ith1 is fixed at 30")
parser.add_argument("--wait", dest="wait", action="store_true", help="wait 60 sec. before starting the run")
parser.add_argument("--data-dir", default="/storage/TOFHIR2", help="Directory to store raw and reco data")

#------------------------
# parsing input arguments
args = parser.parse_args()

if not os.path.exists(args.data_dir):
	print("Error: data directory '%s' does not exist!" % args.data_dir)
	print("Please rerun with --data-dir specifying where output data is")
	sys.exit(1)

os.system('mkdir -p %s' % os.path.join(args.data_dir,"raw"))
os.system('mkdir -p %s' % os.path.join(args.data_dir,"reco"))

ith1_list = get_list(args.ith1)
ith2_list = get_list(args.ith2)
ithe_list = get_list(args.ithe)
ov_list   = get_list(args.ov)

ovDrop = 0.
if args.ovDrop:
        ovDrop = args.ovDrop

if( args.enChannels ):
        args.enChannels = args.enChannels.split(',')

if( args.fixChannels ):
        args.fixChannels = args.fixChannels.split(',')

run = -1
if not args.fileNamePrefix:
	last_run_file = os.path.join(args.data_dir,"last_run")
	if not os.path.exists(last_run_file):
		print("Last run file '%s' does not exist. Should I create it [y/n]?" % last_run_file)
		answer = raw_input()
		if answer.lower() == 'y':
			with open(last_run_file,"w") as f:
				f.write("0\n")
		else:
			print("Quitting...")
			sys.exit(0)
        with open(last_run_file) as f:
                runs = [int(x) for x in next(f).split()]
                run = str(runs[0]+1)
                os.remove(last_run_file)
                with open(last_run_file,'w+') as f:
                        f.write(run)
        args.fileNamePrefix = os.path.join(args.data_dir,"raw/run%04d" % (int(run)))
else:
        run = args.fileNamePrefix


#---------------------
# copy the config file
new_config_file = os.path.join(args.data_dir, "raw", "config_run%s.ini" % str(run))
os.system('cp %s %s' % (args.config,new_config_file))
with open(new_config_file, 'a') as configCopy:
	configCopy.write(pprint.pformat(args))
	configCopy.write('\n')

#-----------------------------
# load configuration from file
mask = config.LOAD_ALL
# if args.mode != "mixed":
#         mask ^= config.LOAD_QDCMODE_MAP
mask ^= config.LOAD_QDCMODE_MAP
systemConfig = config.ConfigFromFile(args.config, loadMask=mask)

daqd = daqd.Connection()
daqd.initializeSystem()
systemConfig.loadToHardware(daqd, bias_enable=config.APPLY_BIAS_OFF)

asicsConfig = daqd.getAsicsConfig()
activeAsics = daqd.getActiveAsics()

if len(activeAsics) == 0:
        print("no active ASICs found. Exiting...")
        exit()
else:
        print("active ASICs found: ")
        print(activeAsics)


#--------------
# trigger modes
if args.trigger == "none":
        print("### self-triggering mode ###")
if args.trigger == "int":
        # Enable INTERNAL triggers from FEB/D to J15
        daqd.write_config_register_tgr(8, 0x21A, 0x81)
        daqd.setTestPulsePLL(100, int(1./(args.freq*6.25e-06)), args.phase, False)
if args.trigger == "ext":
        # Enable EXTERNAL L1 trigger source from J15
        daqd.write_config_register_tgr(8, 0x21A, 0x01)
        #ext_delay = 1917 # Delay added by FPGA in 6.25 ns increments
        #daqd.write_config_register_tgr(64, 0x02A0, (1<<63) | (0<<62) | (3 << 48) | ( args.prescale << 16) | (ext_delay) ) # prescale: 0..63 -- 0 is 0%, 63 is 63/64%


#--------------------------------------------------------------------
# enable ALDO in case needed (it's only on even ASICs, e.g. 0,2,4...)
#if args.aldo:
#        hvdac_config = daqd.get_hvdac_config()
#        for portID, slaveID, railID in hvdac_config.keys():
#                # set 48 V as ALDO input bias (should not exceed this value)
#                hvdac_config[(portID, slaveID, railID)] = systemConfig.mapBiasChannelVoltageToDAC((portID, slaveID, railID), 46)
#        daqd.set_hvdac_config(hvdac_config)


#------------------------------------------------
# enable required channels (all if not specified)
for portID, slaveID, chipID in activeAsics:
        ac = asicsConfig[(portID, slaveID, chipID)]
        for channelID in range(32):
                cc = ac.channelConfig[channelID]
                cc.setValue("c_tgr_main", 0b11)

if( args.enChannels ):
        for portID, slaveID, chipID in activeAsics:
                ac = asicsConfig[(portID, slaveID, chipID)]
                for channelID in args.enChannels:
                        cc = ac.channelConfig[int(channelID)]
                        cc.setValue("c_tgr_main", 0b00)

else:
        for portID, slaveID, chipID in activeAsics:
                ac = asicsConfig[(portID, slaveID, chipID)]
                for channelID in range(32):
                        cc = ac.channelConfig[channelID]
                        cc.setValue("c_tgr_main", 0b00)

if args.trigger == "ext":
        for portID, slaveID, chipID in activeAsics:
                if chipID%2 is not 0:
                        continue
                gc = asicsConfig[(portID, slaveID, chipID)].globalConfig
                # Enable L1 trigger for even ASICs (with flex and ALDO)
                #if args.l1 :
                #        gc.setValue("c_l1_enable", 0b01)
                #else:
                #        gc.setValue("c_l1_enable", 0b00)
                #gc.setValue("c_l1_latency", 484) # Delay expected by ASIC in 25 ns increments
        # Use ASIC 1 channel 0 to timetag the trigger pulses
        asicsConfig[(0, 0, 1)].globalConfig.setValue("c_ext_tp_en", 1)
        asicsConfig[(0, 0, 1)].channelConfig[0].setValue("c_tgr_main", 0b01)


asicsConfig0 = deepcopy(asicsConfig)
daqd.openRawAcquisition(args.fileNamePrefix)
cfg = deepcopy(asicsConfig0)


#--------------------------------
# scan on thresholds and / or ov
for ith1 in ith1_list:
        for ith2 in ith2_list:
                for ithe in ithe_list:
                        for ov in ov_list:
                                
                                for portID, slaveID, chipID in activeAsics:
                                        ac = cfg[(portID, slaveID, chipID)]
                                        for channelID in range(32):
                                                cc = ac.channelConfig[int(channelID)]
                                                
                                                if args.delayT:
                                                        cc.setValue("cfg_a2_dcr_delay_t",int(args.delayT,2))
                                                if args.delayE:
                                                        cc.setValue("cfg_a2_dcr_delay_e",int(args.delayE,2))
                                                if args.attGain:
                                                        cc.setValue("cfg_a2_attenuator_gain",args.attGain)
                                                
                                                if channelID == 0:
                                                        cc.setValue("cfg_a2_pulse_trim_t",int(15))
                                                if channelID == 31:
                                                        cc.setValue("cfg_a2_pulse_trim_t",int(12))
                                                
                                                if args.trimT:
                                                        cc.setValue("cfg_a2_pulse_trim_t",int(args.trimT))
                                                if args.trimE:
                                                        cc.setValue("cfg_a2_pulse_trim_e",int(args.trimE))
                                                
                                                # raw thresholds
                                                #dac_setting_ith1 = int(ith1)
                                                #dac_setting_ith2 = int(ith2)
                                                #dac_setting_ithe = int(ithe)
                                                # baseline-subtracted thresholds
                                                dac_setting_ith1 = min( 63, systemConfig.mapAsicChannelThresholdToDAC((portID, slaveID, chipID, channelID), "vth_t1", int(ith1)) )
                                                dac_setting_ith2 = min( 63, systemConfig.mapAsicChannelThresholdToDAC((portID, slaveID, chipID, channelID), "vth_t2", int(ith2)) )
                                                dac_setting_ithe = min( 63, systemConfig.mapAsicChannelThresholdToDAC((portID, slaveID, chipID, channelID), "vth_e", int(ithe)) )
                                                # T1-relative T2 threshold
                                                if args.ith2rel:
                                                        dac_setting_ith2 = min( 63, systemConfig.mapAsicChannelThresholdToDAC((portID, slaveID, chipID, channelID), "vth_t2", int(ith1)+int(ith2)) )
                                                        
                                                cc.setValue("cfg_a3_ith_t1", dac_setting_ith1)
                                                cc.setValue("cfg_a3_ith_t2", dac_setting_ith2)
                                                cc.setValue("cfg_a3_ith_e", dac_setting_ithe)
                                                
                                                ############# FIXME
                                                # if chipID == 2:
                                                #         dac_setting_ith1 = min( 63, systemConfig.mapAsicChannelThresholdToDAC((portID, slaveID, chipID, channelID), "vth_t1", 10) )
                                                #         dac_setting_ith2 = min( 63, systemConfig.mapAsicChannelThresholdToDAC((portID, slaveID, chipID, channelID), "vth_t2", 10) )
                                                #         dac_setting_ithe = min( 63, systemConfig.mapAsicChannelThresholdToDAC((portID, slaveID, chipID, channelID), "vth_e",   1) )                                                        
                                                #         cc.setValue("cfg_a3_ith_t1", dac_setting_ith1)
                                                #         cc.setValue("cfg_a3_ith_t2", dac_setting_ith2)
                                                #         cc.setValue("cfg_a3_ith_e", dac_setting_ithe)
                                                #         cc.setValue("cfg_a2_attenuator_gain",0)
                                                #         cc.setValue("cfg_a2_dcr_delay_e",0b0000011)
                                                #######################


                                                if channelID == 0:
                                                        print(("%d %d %d %d : %d,%d,%d") % (portID,slaveID,chipID,channelID,dac_setting_ith1,dac_setting_ith2,dac_setting_ithe))
                                
                                if( args.fixChannels ):
                                        for ac in cfg.values():
                                                for ch in args.fixChannels:
                                                        
                                                        print("fixing channel %d" % int(ch))
                                                                                                                
                                                        #cc.setValue("cfg_a3_ith_t1", 10)
                                                        #cc.setValue("cfg_a3_ith_t2", 10)
                                                        
                                                        cc = ac.channelConfig[int(ch)]
                                                        dac_setting_ith1 = systemConfig.mapAsicChannelThresholdToDAC((portID, slaveID, chipID, channelID), "vth_t1", int(10))
                                                        cc.setValue("cfg_a3_ith_t1", dac_setting_ith1)
                                                        dac_setting_ith2 = systemConfig.mapAsicChannelThresholdToDAC((portID, slaveID, chipID, channelID), "vth_t2", int(10))
                                                        cc.setValue("cfg_a3_ith_t2", dac_setting_ith2)
                                
                                if not args.aldo:
                                        biasVoltageConfig = daqd.get_hvdac_config()
                                        for key in daqd.getActiveBiasChannels():
                                                offset, prebd, bd, over__ = systemConfig.getBiasChannelDefaultSettings(key)
                                                vset = offset + bd + float(ov) + ovDrop
                                                dac_setting = systemConfig.mapBiasChannelVoltageToDAC(key, vset)
                                                biasVoltageConfig[key] = dac_setting
                                                daqd.set_hvdac_config(biasVoltageConfig)
                                
                                if args.aldo:
                                        for portID, slaveID, chipID in activeAsics:
                                                if chipID%2 is not 0:
                                                        continue
                                                gc = (cfg[(portID, slaveID, chipID)]).globalConfig
                                                gc.setValue("c_aldo_en", 0b11)
                                                for aldoID in ['A', 'B']:
                                                        bd, over__ = systemConfig.getBiasChannelDefaultSettingsAldo((portID, slaveID, chipID, aldoID))
                                                        dac = systemConfig.mapALDOVoltageToDAC((portID, slaveID, chipID, aldoID),bd,float(ov)+ovDrop)

                                                        ### FIXME####################
                                                        # if chipID == 2:
                                                        #         dac = systemConfig.mapALDOVoltageToDAC((portID, slaveID, chipID, aldoID),bd,3.5)
                                                        ##########################
                                                        gc.setValue("Valdo_%s_DAC"%aldoID, dac)


                                daqd.setAsicsConfig(cfg)
                                sleep(0.1)
                                if args.wait:
                                        sleep(60.)
                                        args.wait = False
                                print("ov: %3.1f,   ith1: %2d,   ith2: %2d,   ithe: %2d" % (float(ov), int(ith1), int(ith2), int(ithe)))
                                print(">>> t1: " + str(((cfg[(0,0,0)]).channelConfig[0]).getValue("cfg_a3_ith_t1")))
                                print(">>> t2: " + str(((cfg[(0,0,0)]).channelConfig[0]).getValue("cfg_a3_ith_t2")))
                                print(">>> e: " + str(((cfg[(0,0,0)]).channelConfig[0]).getValue("cfg_a3_ith_e")))
                                daqd.acquire(args.time, float(ov), 10000*(int(ith1)+1)+100*(int(ith2)+1)+int(ithe)+1)
                                        

#-------------------------
# switch off bias voltages
systemConfig.loadToHardware(daqd, bias_enable=config.APPLY_BIAS_OFF)

if args.aldo:
        for portID, slaveID, chipID in activeAsics:
                if chipID%2 is not 0:
                        continue
                gc = (cfg[(portID, slaveID, chipID)]).globalConfig
                gc.setValue("c_aldo_en", 0b00)
        daqd.setAsicsConfig(cfg)
        
daqd.setTestPulseNone()
